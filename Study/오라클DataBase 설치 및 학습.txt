오라클 다운로드
https://www.oracle.com/database/technologies/oracle-database-software-downloads.html 

설치 버전
Oracle Database 11g Release 2 Express Edition for Windows 64

기억하기
설치 비밀번호/ Port for 'Oracle Database Listener': 1521

CMD를 종료할 때는 윈도우 창을 닫지 말고 exit 

CMD를 exit 하지 않고 종료할 때 발생하는 오류
ora-01033 orcle initialization or dhutdown in progress

오류해결 타이핑
sqlpls "/as sysdba"

sql>
recover datavase;
alter database open;
shutdown immediate;
startup;

오류해결이 안되면 삭제 후 재설치.

오라클 삭제
remove가 안될 때 삭제 방법
윈도우검색 - regedit - oracl 관련 파일 삭제 ora & ODBC
내컴퓨터 속성- 고급시스템- path - 오라클path 삭제 
c 오라클폴더 삭제

20.11.20)027------------------------------------------------------------------------------------

 cmd에서 로그인
sqlplus system/sys1234

오라클 설치 시 system과 sys 계정이 있다.

오라클 계정생성
계정을 생성할 때는 일정자격이 있는 계정에서 생성

[ 오라클(sqlplus)의 명렁어 ]
(sql문 아님) ; 안붙인다

SHOW USER
현재 사용 유저를 보여준다

CONN 
사용 유저를 변경
ex) CONN userid/password

DESC
테이블과 자료형을 보여준다
ex) DESC tablename
--

DB에서의 객체
user, table, function, sequence, indexm trigger, procedure, ...

DB에서 데이터는 객체가 아니다.

객체의 명령어
creat, alter, drop, ...

데이터의 명령어
insert, select, update, delete, ...

객체를 생성, 수정 , 삭제 하는 SQL문
데이터 정의 언어 (DDL : Data Definition Language)
 create, alter, drop

보안적인 요소를 담고 있는 SQL문
데이터 제어 언어(DCL : Data Control Language)
 grant, revoke

트랜잭션을 제어하는 SQL문
TCL(Transaction Control Language)
- DCL(Data Control Language)의 일부
commit, rollback

데이터의 입력, 조회, 수정, 삭제 하는 SQL문
데이터 조작 언어(Data Manipulation Language, DML)
insert, select, update, delete

*중요*--- SQL 명령어

[ 객체의 명령어 ]

* creat 생성 
ex) CREATE USER ezen IDENTIFIED BY ezen;

* alter 수정 
ex)

*drop 삭제 
 ex) DROP USER ezen

* grant 권한 부여 
ex) GRANT CONNECT, RESOURCE, DBA TO ezen;

* revoke 부여 취소 
ex) REVOKE CONNET, RESOURCE, DBA FROM ezen;

[ 데이터의 명령어 ]

* insert 입력
ex) INSERT INTO member (컬럼, ... , ...) VALUES ('데이터', ... , ...);

* select 조회
ex) SELECT * FROM member;

* update 수정

* delete 삭제

* commit 확정

* rollback 확정취소
ex) ROLLBACK;

sql문 입력 시 대소문자를 구분하지 않음

데이터는 대소문자를 구분함

숫자를 제외한 모든 자료형은 '작은 따옴표' 안에 입력

[ 테이블 생성 ]

ex)
create table tbl_member(
id varchar2(6),
name varchar2(15),
age number,
jon varchar2(2),
birth date
);
or
create table member(mid varchar2(6), name varchar2(15), job varchar2(3), birth date);

[ 테이블에 데이터 입력 ]
ex)
SQL> insert into member (mid) values ('m001');
1 row created.
SQL> insert into member (mid, name) values ('m002','kim');
1 row created.
SQL> insert into member (mid, name, job) values ('m003', 'lee','a');
1 row created.
SQL> insert into member (mid, name, job, birth) values ('m004', 'park','b', '2000-12-17');
1 row created.
SQL> insert into member values ('m005','kang','a','1990-10-03' );
1 row created.

테이블 확인
desc tbl_member

테이블 삭제
drop table member;

테이블의 데이터 조회
select * from member;

테이블 데이터의 입력 초기화
rollback;

[SQL문, sqlplus 명령어 연습문제]
1. sql 객체 명령어 5개
2. sql 데이터 명령어 6개
3. 실습 코딩
- 계정 sss 생성
- sss에 권한부여 커넥트, 리소스, dba
- sss로 로그인
- 현재 계정 확인
- 다시 원래계정으로 로그인
- sss에 권한취소
- sss계정 삭제
- mem 테이블 생성(id, name, job, birth, num)
- mem 확인
(mem 테이블 데이터 입력)
- id만 입력(m001)
- name, job 만 입력(kim, a)
- name, birth, num 만 입력(lee, 2020-11-21, 01)
- 모든 칼럼 한번에 입력(m002, park, b, 2020-11-20, 2)
- 테이블의 데이터 조회
- 테이블의 입력 데이터 삭제(commit전 데이터 롤백)
- mem 테이블 삭제


20.11.23)029------------------------------------------------------------------------------------
column= 컬럼(목록), 레코드를 분류하는 기준
record(row) = 레코드(행), 칼럼 내의 단 하나의 값

UPDATE 
UPDATE member SET 칼럼='레코드' WHERE  컬럼='레코드';
		   (이렇게 수정)		(변경하고 싶은 녀석)	    			
mid 'm005'인 레코드를 mid='M005" 업데이트
SQL> update member set mid = 'M005' where mid = 'm005';

 mid 값이 m001인 레코드만 name을 choi로 수정
SQL> update member set name = 'choi' where mid = 'm001';
UPDATE member SET name = 'choi' WHERE mid = 'm001';

 mid 값이 m001인 레코드만 job은 b로 birth는 1888-5-3으로로 수정
SQL> update member set job = 'b', birth = '1888-05-03' where mid = 'm001';

 mid 값이 m002인 레코드만 job은 c로 birth는 1988-5-5으로로 수정
SQL> update member set job='c', birth='1988-05-05' where mid='m002';

commit; 확정

where의 = 은 > , < 같은 부등호도 가능 // 숫자가 아닌 레코드의 부등호는 무엇을 비교하나?

DELETE

member 레코드 전부 삭제
SQL> delete from member;

rollback;
(commit 한 작업으로)

mid가 m003인 레코드 삭제
SQL> delete from member where mid='m003';

name이 park인 레코드 삭제
SQL> delete from member where name='park';

rollback;

job이 a인 레코드 삭제
SQL> delete from member where job = 'a';

< 이클립스에서 오라클 SQL 코딩 하기위한 설정 >

클래스패스 확인
-- 이클립스 프리퍼런시즈 -java - 빌드패스- 클래스패스- JRE_LIB 
C:\Program Files\Java\jdk1.8.0_261\jre\lib

C:\oraclexe\app\oracle\product\11.2.0\server\jdbc\lib
-ojdbc6.jar 복사

클래스패스에 붙여넣기
->C:\Program Files\Java\jdk1.8.0_261\jre\lib\ext 

CMD에서 작업한 내용을 이클립스에서 하려면 connection이 필요함
-eclipse - 윈도우- 아더- 데이타매니지먼트- 데이터 소스익스플로러 추가

데이터베이스 커넥션즈 우클릭 뉴 - 오라클선택 넥스트 - 뉴 드라이버 - 
name 탭/ 오라클드라이버 11
 jar탭/ 있는거 리므브 C:\Program Files\Java\jdk1.8.0_261\jre\lib\ext\ojdbc6.jar 
프로퍼티스탭/ url/ server -> locakhost , db -> xe 변경 
아이디/패스워드 입력 . 테스트 !

elipse 실행 시 DB를 connect 한다.

eclipse의 SQL resruts가 먹통일 때 
window - new window

- eclipse에서
확장자명은 .sql
실행
명령어 뒤에 ; 을 쓰지 않고 블럭을 잡고 alt+x

create table test(
name varchar2(3),
age number(3)
)

test 테이블에 다음 값들을 입력하세요.
kim 20,lee 40, park 50,cho 23

insert into test values ('kim', 20)
insert into test values ('lee', 40)
insert into test values ('park', 50)
insert into test values ('cho', 23)
commit

test 테이블의 모든 레코드(where 생략)의 모든 컬럼(*)값을 조회
select *from test

test 테이블의 모든 레코드의 name 컬럼값을 조회
select name from test

test 테이블의 모든 레코드의 age 컬럼값을 조회
select age from test

AS (ALIAS 컬럼의 별칭)
select name as 이름, age as 나이 from test
select name 이름, age 나이 from test
 
DISTINCT
중복된 컬럼 하나만 출력
SELECT DISTINCT name FROM test

DESC 
내림차순 정렬
SELECT age FROM test ORDER BY age DESC
select age 나이 from test order by 나이 desc

ASC
오름차순 정렬
SELECT age FROM test ORDER BY age ASC

NUll인 값을 조건으로 조회 할 때
= 대신 IS를 사용
select * from test where mid IS NULL

NULL이 아닌 값을 조건으로 조회 할 때 
!= 대신 IS NOT을 사용
select * from test where mid IS NOT NULL

OR
여러 조건 중 하나만 만족
select * from test where age=20 or age=23 or age=40

IN
or의 중첩, a이거나 b이거나 c이거나 d이거나 ...
IN( a, b, c ,b, ... ) == where a OR b OR c OR d OR ...
select * from test where age in(20, 23, 40, 43, 61, 77)

NOT IN
모두 아닌 것. a도 b도 c도 d도 ... 모두 아닌 것
NOT IN (a, b, c, d, ...) 
select * from test where age not in(20, 23, 40, 43, 61, 77)

AND 
두 조건 모두 만족
select * from test where name='kim' and age=33

BETWEEN
BETWEEN a AND b 
a에서 b까지 포함하는 범위
select * from test where age>=25 and age <=47
==
select * from test where age between 25 and 47

LIKE
~같이, 일부 문자만 입력하여 조회

test 테이블의 모든 레코드를 모든 컬럼이 포함되게 조회하되 
이름을 기준으로 내림차순으로 정렬하시오 
만약 이름이 같으면 나이가 많은 사람이 우선이 되도록 정렬하싱오
select * from test order by name desc, age desc

null인 값을 조건으로 조회 할 때
 = 대신 is를 사용

null이 아닌 값을 조건으로 조회 할 때
 != 대신 is not을 사용

name이 kim인 레코드 조회
select * from test  where name ='kim'

name이 kim이 아닌 레코드 조회 
select * from test where name !='kim'

insert into test (age) values (55)
insert into test (name) values ('pyo')
commit

select * from test

name이 null인 레코드 정보를 조회
단, 컬럼은 name만 있음
select name 이름, age 나이 from test where name is null

name이 null이 아닌 레코드 정보를 조회
단, 레코드에 대한 정렬은 age가 증가되게 정렬하고,
만약 age가 같으면 name을 내림차순으로 정렬
select * from test where name is not null order by age asc, name desc

age가 55인 레코드 조회
select * from test where age = 55

age가 55가 아닌 레코드 조회
select * from test where age != 55

age가 null인 레코드 조회
select * from test where age is null

null이 아닌 레코드를 조회하시오
select * from test where age is not null

age가 33보다 큰 레코드 조회
select * from test where age >33

age가 33보다 크거나 같은 레코드 조회
select * from test where age >=33

age가 20이거나 23이거나 40인 레코드를 조회
select * from test where age=20 or age=23 or age=40

age가 20이거나 23이거나 40이거나 43이거나 61이거나 77인 레코드를 조회
select * from test where age in(20, 23, 40, 43, 61, 77)

age가 20이거나 23이거나 40이거나 43이거나 61이거나 77인 레코드가 아닌 레코드를 조회
select * from test where age not in(20, 23, 40, 43, 61, 77)

name이 kim이고 age가 33인 레코드 조회
select * from test where name='kim' and age=33

age가 25보다 크고 47보다 작은 레코드를 조회
select * from test where age>25 and age<47

age가 25보다 크거나 같고 age가 47보다 작거나 같은 레코드를 조회
select * from test where age>=25 and age <=47
==
select * from test where age between 25 and 47
age between A and B (age가 A에서 B까지 포함하는 범위 조회)

LIKE
~같이, 일부 문자만 입력하여 조회

1) 일부 문자와 레코드의 자릿수를 알고 있을 때

k로 시작하는 3자리의 name을 조회
select * from test where name like 'k__'
두번 째가 e인 5자리의 name을 조회
select * from test where name like '_e___'
두번 째가 e인 3자리의 name을 조회
select * from test where name like '_e_'

2) 일부 문자를 포함하는지 조회

o로 끝나는 name를 조회
select * from test where name like '%o'
p가 들어가는 name을 조회
select * from test where name like '%c%'

rownum
오라클의 row번호, 반드시 별칭을 명시
select *from
(select rownum rrum, name, age from test)
where rrum between 2 and 4

원 select order by(정렬) 조건이 들어가면,
별도의 select문을 이용하여 rownum 컬럼을 넣어줘야 함

select * from(
select rownum rrum, name, age from
(select name, age from test order by age asc)
)
where rrum between 2 and 4

JDBC 
Java와 DB를 연결시켜주는 프로그램

ex)
입력
insert into test (name, age) values ('park',33)
insert into test values ('kim', 25)
insert into test (age) values ('lee')
insert into test (name) values (55)

수정
update test set name ='park' where age='30'

조회 
select  distinct name from test 
select name 이름, age 나이 from test 
select * from test order by age asc
select * from test order by age desc
select * from test where name is null
select * from test where age is not null
select * from test where name = park or name =kim 
select * from test where name in ('park', 'kim', 'lee')
select * from test where age not in (25,55,33)
select * from test where name = 'park' and age = 33
select * from test where age between 25 and 47
select * from test where name like '%c%'
select * from (select rownum rrum, name, age from test) where rrum between 2 and 4
select * from (select rownum rrum, name, age from (select name, age from test order by age asc))where rum between 2 and 4

삭제
delete from test where name is null

201124)030------------------------------------------------------------------------

기본키 
--> 주키 = primary key = pk
DB에 데이터를 저장한 상태에서
컬럼 하나만을 이용해서
특정 레코드 하나만을 조회
NULL 불가, 중복 불가


add constraint
(제약 조건 추가)

1)기본키에 대한 중복을 불허
unique constraint(유니크 제약조건)

2)기본키에 대해 NULL 입력 불가
NOT NULL 제약조건이 추가


기본키 설정 3가지 방법
1. 테이블 생성 후 수정
alter table member2 add constraint pk_member2_id primary key(id)

2. 테이블 생성 시 지정
create table test2(
id varchar2(6) primary key,
age number(3)
)

3. 테이블 생성 시 추가
create table test3(
id varchar2(6),
age number(3),
constraint pk_test3_id primary key(id)
)


외래키
foreign(랙댜후, fk)
허용된 데이터(부모테이블의 기본키)만 데이터로 입력할 수 있다.
integrity constraint (참조 무결성 제약조건)
NULL 허용, 중복 허용

외래키 설정 순서
1. 부모테이블 생성
2. 부모테이블의 기본키 설정
3. 부모테이블 데이터 추가
4. 자식테이블 생성
5. 자식테이블의 외래키 설정, 부모테이블의 기본키 참조

ex) 외래키 설정

1. 부모 테이블 생성
create table depart(
edep varchar2(9)
)

2. 부모테이블의 기본키 설정
alter table depart add constraint pk_depart_edep primary key(edep)
// 부모테이블의 기본키 설정, 자식테이블의 외래키가 될수 있는 자격을 갖춤

3. 부모테이블 기본키 데이터 추가
insert into depart values ('인사부')
insert into depart values ('홍보부')
insert into depart values ('연구실')
insert into depart values ('영업부')
insert into employee (eid, ename) values ('e006','kim')

4. 자식테이블 생성
create table employee(
eid varchar2(6),
ename varchar2(6), 
edep varchar2(9)
)

5. 자식테이블의 외래키 설정 
alter table employee add constraint fk_employee_edep foreign key(edep) references depart(edep)
 자식테이블의 제약조건(외래키)설정, 레퍼런시즈(참조)
 자식 테이블에서는 부모테이블의 primary key 만 입력할 수 있다

데이터 입력
edep에는 인사부/홍보부/연구실/영업부만 들어갈 수 있음.
비서실은 부모테이블에 없어서(참조 무결성 제약조건) 입력 할 수 없음
 
insert into employee values ('e001', 'kim','인사부')
insert into employee values ('e002', 'lee','홍보부')
insert into employee values ('e003', 'park','연구실')
insert into employee values ('e004', 'choi','영업부')
insert into employee values ('e005', 'jung','비서실')

select * from employee
delete from employee where eid='e005'
commit

eid를 pk로 설정
alter table employee add constraint pk_employee_eid primary key(eid)

// 외래키 설정 연습 테이블 만들기
create table menu(
name varchar2(15) primary key,
price number
)

insert into menu values ('불고기', 15000)
insert into menu values ('제육볶음', 20000)
insert into menu values ('닭도리탕', 25000)
insert into menu values ('삼계탕', 15000)

자식테이블
create table orderm(
tablenum number(2),
name varchar2(15),
constraint pk_orderm_tablenum primary key(tablenum)
)

alter table orderm add constraint fk_orderm_name foreign key(name) references menu(name)

insert into orderm values (01, '불고기')
insert into orderm values (02, '제육볶음')
insert into orderm values (04, '삼계탕')
insert into orderm (tablenum) values (05)
왜래키 null 가능
insert into orderm values (06, '삼계탕')
왜래키 중복가능 

insert into orderm values (06, '닭도리탕')
기본키 걸려서 안들어감
insert into orderm values (07, '피자')
외래키 걸려서 안들어감

select * from orderm


[문제]
id 값을 기본키로 설정(alter constraint)
기본키 설정 3가지 방법
외래키 설정 연습 테이블 만들기
-menu의 기본키 설정
-orderm의 외래키설정, 기본키 설정
- 부모테이블 menu 생성
('불고기', 15000)
('제육볶음', 20000)
('닭도리탕', 25000)
('삼계탕', 15000)
- 자식테이블 orderm 생성
-왜래키를 중복해서 입력
-왜래키에 null 
-기본키 중복해서 입력(입력안됨확인)
-왜래키 이외의 값 입력(입력안됨확인)
----

자바 메소드로 
DB에 접근하기(insert, delete, update, select)
select는 executeQuery 제외하고 나머지는 executeUpdate
DAO클래스는 DB테이블당 하나씩 만든다.
DTO클래스의 멤버 필드는 DB테이블의 컬럼과 연결된다.
DAO클래스의 생성자에 full package(패키지.클래스명)로 오라클 드라이버(jdbc연결)

jdbc는 자바프로그램과 오라클 DB를 연결 

insert 
values (?,?,?,?,...) 인덱스가 1부터 시작한다.
ex) pst.setString(1, "m006"); //인덱스와 입력값

Connection 과 PreparedStatement 는 메서드가 끝나기전에 수동으로 닫아준다.
(자바앱 - pst  -  Connection - DriverManager - DATEBASE                 ,Stream에서 처럼 pst를 먼저 close())
(배고파 - 주문 - 인터넷(연결) - 배달앱                  - 각 매장)
그러기 위해서 try~catch 구문 밖에 초기화 값으로 선언한다

DB는 Date.sql
claender는 date.util
getTimeMillis() , getTime()로 형변환
(java.sql)Date birth = list.get(i).getBirth();
java.util.Date bi = new java.util.Date(birth.getTime());

select
executeQuery() 를 쓴다.
(cud 는 executeUpdate or execute(반환값이 햇갈린다))

CRUD( create, Read, Update, Delete)
- insert, select, update, delete 이다 .(isud로 하지? 그냥 암기)
- 대충 한국말로 생성, 읽기, 수정, 삭제

executeUpdate()
전달에 성공 갯수를 int형으로 반환(실패 0, 성공 1이상)
- CD는 -1 반환
​
execute()
boolean값을 반환하는데 반환조건이 특정 값에 따른다.

참고 링크
[JAVA] Execute, ExecuteQuery, ExecuteUpdate 차이점 알아보기
Execute 1. 수행결과로 Boolean 타입의 값을 반환합니다. 2. 모든 구문을 수행할 수 있습니다. execute 함수를 사용하는 방법입니다. -> 리턴값이 ResultSet 일 경우에는 true, 이 외의 경우에는 false 로 출력됩..
mozi.tistory.com
​
next()
반복문이나 조건문에서 객체의 값의 유무를 확인할 수 있다.
if(rs.next()){}
while(rs.next()){}
​
Date birth=rs.getDate("birth"); 별칭이 있을 때 컬럼명이 아닌 별칭으로 작성
Date birth=rs.getDate("생일"); 
public class Test {	// DAO클래스 이다
	
	// full package: 패키지.클래스명
	// kr.co.ezen.Test
	private final String DRIVER_NAME = "oracle.jdbc.OracleDriver";
	private final String URL ="jdbc:oracle:thin:@localhost:1521:xe";
	private final String USER = "ezen";
	private final String PASS	= "ezen";
	
	public Test() {
// 생성자. main클래스에서 T1객체를 만들 때 한번 실행 되면서 오라클 드라이버가 DB와 연결됨
		//full package: 패키지.클래스명
		//kr.co.ezen.Test
		try {
			Class.forName("oracle.jdbc.OracleDriver");
			System.out.println("드라이버 로딩 성공");
		} catch (ClassNotFoundException e) {
			System.out.println("드라이버 로딩 실패");
			e.printStackTrace();
		}
	}
	public void me1() {
		Connection conn = null;
		PreparedStatement pstmt = null;
//		String sql = "INSERT INTO member(mid, name, job, birth) values ('m005','kim', 'd', '2000-01-03')"; //  pstmt.setString과 대응 됨
		String sql = "INSERT INTO member(mid, name, job, birth) values (?, ?, ?, ?)"; //파라미터로 받는 데이터는 ? 동적인것 , 인덱스 1,2,3,4
		try {
			conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "ezen", "ezen");
			System.out.println("커넥션 연결 성공");
			
			pstmt = conn.prepareStatement(sql);
			System.out.println("prepareStatement 생성 성공");
			
			pstmt.setString(1, "m006"); //인덱스와 입력값
			pstmt.setString(2, "kim");
			pstmt.setString(3, "c");
			pstmt.setDate(4, new Date(Calendar.getInstance().getTimeInMillis()));// long타입 파라미터로 수정값을 넣을 수 있다.
			pstmt.execute(); // DB or driver에게 데이터(.setString( , ) 값)를 전달.
			
		} catch (Exception e) {
			System.out.println("커넥션 연결 실패");
			System.out.println("prepareStatement 생성 실패");
			e.printStackTrace();
		}finally {
			try {
				if (pstmt != null) {
					pstmt.close();// conn보다 먼저 닫기
				}
				if (conn != null) {
					conn.close();
				}
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
	}
}

--------------------------------

public class MemberDAO {
	
	private final String DRIVER_NAME = "oracle.jdbc.OracleDriver";
	private final String URL ="jdbc:oracle:thin:@localhost:1521:xe";
	private final String USER = "ezen";
	private final String PASS	= "ezen";
	
	public MemberDAO() {
		try {
			Class.forName("oracle.jdbc.OracleDriver");
			System.out.println("드라이버 로딩성공");
		} catch (ClassNotFoundException e) {
			System.out.println("드라이버 로딩 실패");
			e.printStackTrace();
		}
	}
		
	public void insert(MemberDTO dto) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		String sql = "INSERT INTO member(mid, name, job, birth) values (?, ?, ?, ?)";
		
		try {
			
			conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", USER, PASS);
			System.out.println("insert 연결 성공");
			
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setString(1, dto.getMid());
			pstmt.setString(2, dto.getName());
			pstmt.setString(3, dto.getJob());
			pstmt.setDate(4, dto.getBirth());
		
			int insert	= pstmt.executeUpdate(); //select메소드는 executQuery() 사용
			if(insert ==1) {
				System.out.println("입력 성공");
			}else {
				System.out.println("입력 실패");
			}
			
		} catch (Exception e) {
			System.out.println("insert 연결 실패");
			e.printStackTrace();
		}finally {
			try {
				if (pstmt != null) {
					pstmt.close();					
				}
				if (conn != null) {
					conn.close();
				}
			} catch (Exception e2) {
			e2.printStackTrace();
			}
		}
		
	}
	
	public void delete(MemberDTO dto) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		String sql = "delete from member where mid=?";
		try {
			conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", USER, PASS);
			pstmt =conn.prepareStatement(sql);
			pstmt.setString(1, dto.getMid());
		
			int del= pstmt.executeUpdate();
			if(del==1) {
				System.out.println("삭제 성공");
			}else {
				System.out.println("삭제 실패");
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			try {
				if (pstmt != null) {
					pstmt.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
	}
}

201125)031--------------------------------------------------------------------------------------

	public void update(MemberDTO dto) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		String sql = "Update member set name=?,job=?,birth=? where mid=?"; // ? 순서대로index 1,2,3,4
		
		try {
			
			conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", USER, PASS);
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setString(1, dto.getName());
			pstmt.setString(2, dto.getJob());
			pstmt.setDate(3, dto.getBirth());
			pstmt.setString(4,	dto.getMid());
			
			pstmt.executeUpdate();
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			try {
				if (pstmt != null) {
					pstmt.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
	}

main에서

MemberDTO odto= dao2.selectbymid("m005"); // 기존 데이터 가져오기
MemberDTO dto = new MemberDTO("m005", "lee", odto.getJob(), odto.getBirth()); // 수정 하지 않을 값은 기존데이터로 입력
dao2.update(dto);

selectBymid

	public MemberDTO selectBymid(String mid) {
		MemberDTO dto = null;
		
		Connection conn = null;
		PreparedStatement pstmt= null;
		String sql = "select * from member where mid=?";
		ResultSet rs = null;
		
		try {
			conn = DriverManager.getConnection(URL, USER, PASS);
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, mid);
			
			rs = pstmt.executeQuery(); // rs에 저장된 데이터는 최대 1개, 조건문사용 
			
			if (rs.next()) { // rs에 데이터가 있나?
				String job =rs.getString("job") ;// Label은 별칭, 컬럼명은 별칭을 대신함
				String name =rs.getString("name") ;
				Date birth= rs.getDate("birth");
				
				dto= new MemberDTO(mid, name, job, birth);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (pstmt != null) {
					pstmt.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
		
		return dto;
	}

	public List<MemberDTO> select() {
		List<MemberDTO> list = new ArrayList<MemberDTO>();
		Connection conn =null;
		PreparedStatement pst = null;
		String sql = "select * from member";
		ResultSet rs=null;
		try {
			conn = DriverManager.getConnection(URL, USER, PASS);
			pst = conn.prepareStatement(sql);
			
			rs=pst.executeQuery();
			while(rs.next()) {
				String id=rs.getString("mid");
				String name=rs.getString("name");
				String job=rs.getString("job");
				Date birth = rs.getDate("birth");
				MemberDTO dto = new MemberDTO(mid, name, job, birth);
				list.add(dto);
			}
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (pst != null) {
					pst.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
		
		return list;
	}
[[ 연습 문제 ]]
JDBC
CRUD 각 메서드 생성

insert() 만들기
DB테이블에 입력하기
delete() 만들기
DB테이블 레코드 삭제하기

pstmt.execute(); 전달 값이 입력이 안되면 발생
java.sql.SQLException: 인덱스에서 누락된 IN 또는 OUT 매개변수:: 1

jdbc_me 확인

aicd
트랜젝션
하나의 수행 단위
aicd 원자성, 고립성, 지속성

트랜젝션 처리
하나의 사건이 발생했는데 cud(입력, 수정, 삭제)가 복합적으로 일어나는 상황
(조회가 빠짐. DB에 직접적으로 연결되어 DB의 데이터에 영향을 주는 상황에서 발생)
select는 데이터를 출력할 뿐이라서 DB에 영향은 주지 않는다
다 성공시 commit
하나라도 실패시 rollback

커넥션과 연결됨. 연결되고 바로 오토 커밋을 수동커밋으로
트랜젝션 처리는 finally에서


201126)032-------------------------------------------------------------------------------------------

------ transactionex.sql --
kim: 0
lee: 10000
------------------> transter(kim,lee,10000)
- kim이 lee에게 1만원을 빌림. 
 kim balance +10000
 lee balance -10000
 ------------------> transter(lee,kim,10000)
- kim이 lee에게 1만원을 갚음.
 lee balance +10000
   ------------------- 전산 오류 or 고장
 kim balance -10000
  -------------------- kim의 돈이 빠져나가지 못함
  ------->트랜젝션 처리 
  -- 정상이면 commit 실패면 rollback
  -- 1. conn의 AutoCommit을 수동으로 변경
  -- 2. 트랜젝션 시작전 boolean 변수를 false로 선언
  -- 3. 트랜젝션이 끝나면 boolean 변수에 true를 대입
  -- 4. conn이 닫히기 전 try구문에 if문(true 라면 commit을 false라면 rollback를 실행)

create table account(
id varchar2(3) primary key,
balance number
)
 
 insert into ACCOUNT (id, balance) values ('kim', 0)
 insert into ACCOUNT (id, balance) values ('lee', 10000)
 commit
  
 select * from ACCOUNT
-------------------------

TransactionEx
public class AccountDAO {

	private final String DRIVER ="oracle.jdbc.OracleDriver";
	private final String URL ="jdbc:oracle:thin:@localhost:1521:xe";
	private final String USER ="ezen";
	private final String PASSWORD ="ezen";
	
	public AccountDAO() {
		try {
			Class.forName(DRIVER);
			System.out.println("드라이버 로딩 성공");
		} catch (ClassNotFoundException e) {
			System.out.println("드라이버 로딩 실패");
			e.printStackTrace();
		}
	}
	public void transter(String fromId, String toId, int howmuch) {
		
		Connection conn =null;
		PreparedStatement pstmt=null;
		String sql ="update account set balance = balance + ? where id=?";
		String sql2 ="update account set balance = balance - ? where id=?"; // fromId와 toId순서가 바뀌면 좋겠다..
		ResultSet rs=null; // 사용안함. 설명을 위해서 추가
		// 트랜젝션 처리
		boolean isok= false; // 트랙젝션의 조건. 중간에 비정상적 종료한다면 기본값 false
		try {
			conn = DriverManager.getConnection(URL, USER, PASSWORD);
			conn.setAutoCommit(false);
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, howmuch);
			pstmt.setString(2, toId);
			pstmt.executeUpdate();
			
			if(pstmt !=null) {		// sql이 정상수행(!=null) 했다면 여기서 한번 닫아준다.
				pstmt.close();
			}
			System.out.println("곧 전원이 나갑니다");
			System.out.println(4/0);	// 고장을 표현 exception
			
			pstmt = conn.prepareStatement(sql2);
			pstmt.setInt(1, howmuch);
			pstmt.setString(2, fromId);
			pstmt.executeUpdate();
			
			isok= true;		// 트랜잭션의 조건 성공적으로 수행했다면 isok = true
		} catch (Exception e) {
			e.printStackTrace();// 배포시 요구사항명세서 확인
		}finally {
			// commit, rollback은 conn이 가진 기능이므로  connection이 close되기 전에 실행.
			try {		// 기능에 따라서 try~ catch구문을 분리해서 finally에 작성
				if (isok) {		// conn의 기능
					conn.commit(); // 정상 종료라면 true 이므로 commit
				}else {
					conn.rollback(); // 중간에 비정상 종료라면 false 이므로 rollback
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {			// close() 기능들
				if (rs != null) {
					rs.close();
				}
				if (pstmt != null) {
					pstmt.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
	}
	
}

[연습 문제]
A->B에게 돈을 전달하는 기능 구현
트랜젝션 처리
[문제2]
멤버쉽 테이블
아이디, 이름, 포인트 컬럼
오더 테이블
아이디, 상품1, 가격 ,  bey
주문을 넣으면 멤버쉽 테이블의 포인트 컬럼+10 증가
-- 주문 테이블에 레코드가 추가되면
-- 회원 테이블의 특정 레코드의 point 컬럼 값이 변한다.

NVL2(조건1,값1,값2)  null이면 값1 아니면 값2 (자동으로 값을 만듦)

---sql----
create table member10(
 mid varchar2(10),
 point number
 )
 insert into member10 values ('m001',0)
 
 create table order1(
 oid varchar2(6) primary key,
 menu varchar2(3),
 mid varchar2(6)
 )
-------------------

	public void transter2(String oid, String menu, String mid) {
		Connection conn =null;
		PreparedStatement pst=null;
		String sql1="insert into order1 values(?,?,?)";
		String sql2="update member10 set point= point + 10 where mid=?";
		ResultSet rs=null; // 필요없음 설명을 위해
		boolean isok=false;
		try {
			conn=DriverManager.getConnection(URL, USER, PASSWORD);
			pst=conn.prepareStatement(sql1);
			conn.setAutoCommit(false);
			pst.setString(1, oid);
			pst.setString(2, menu);
			pst.setString(3, mid);
			
			pst.executeUpdate();
	
			if (sql1 != null) {
				pst.close();
			}
		//	System.out.println("비정상 종료"+4/0);
			
			pst=conn.prepareStatement(sql2);
			pst.setString(1, mid);
		
			pst.executeUpdate();
		
			isok=true;
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			
			try {				
				if (isok) {			
					conn.commit();
				}else {
					conn.rollback();
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {				 
				if (rs != null) {
					rs.close();
				}
				if (pst != null) {
					pst.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
		
	}

try close의 중복 처리
private void closeAll(ResultSet rs, PreparedStatement pstmt, Connection conn)

날짜 입력받아서  sql에 저장하기
ex)
		Calendar cal = Calendar.getInstance();
		cal.set(1994, 3-1, 1);
		long date = cal.getTimeInMillis();
		Date birth = new Date(date);
		dao.insert(new MemberDTO("m001", "kim", "a", birth));
------------------------
		System.out.println("출생년도를 입력하세요");
		int year = sc.nextInt();
		sc.nextLine();
		
		System.out.println("출생월을 입력하세요");
		int month = sc.nextInt()-1;
		sc.nextLine();
		
		System.out.println("출생일을 입력하세요");
		int date = sc.nextInt();
		sc.nextLine();
		
		Calendar cal = Calendar.getInstance();
		cal.set(year, month, date);
		Date birth = new Date(cal.getTimeInMillis());

----------mms2

package com.naver;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

public class MemberDAO {
	private final String DRIVER="oracle.jdbc.OracleDriver";
	private final String URL="jdbc:oracle:thin:@localhost:1521:xe";
	private final String USER="home";
	private final String PASSWORD="home";
	public MemberDAO() {
		try {
			Class.forName(DRIVER);
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	}
	
	private void closeAll(ResultSet rs, PreparedStatement pstmt, Connection conn) {
		
		try {
			if (rs != null) {
				rs.close();
			}
			if (pstmt != null) {
				pstmt.close();
			}
			if (conn != null) {
				conn.close();
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void delete(MemberDTO dto) { //t 트랜젝션 사용하지 않지만 적용해봄
		Connection conn =null;
		PreparedStatement pstmt=null;
		String sql = "delete from member where mid=?";
		boolean isok=false;
		try {
			conn = DriverManager.getConnection(URL, USER, PASSWORD);
			conn.setAutoCommit(false);
			pstmt=conn.prepareStatement(sql);
			pstmt.setString(1, dto.getMid());
			pstmt.executeUpdate();
			
			isok=true;
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			try {
				if (isok) {
					conn.commit();
				}else {
					conn.rollback();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
			closeAll(null, pstmt, conn);
		}
		
	}
	
	
	public void update(MemberDTO dto) { //t 트랙젝션 연습용. 사용안함
		Connection conn =null;
		PreparedStatement pstmt = null;
		String sql = "update member set name=? where mid=?";
		boolean isok=false;//t
		try {
			conn = DriverManager.getConnection(URL, USER, PASSWORD);
			conn.setAutoCommit(false);//t
			pstmt=conn.prepareStatement(sql);
			pstmt.setString(1, dto.getName());
			pstmt.setString(2, dto.getMid());
			
			pstmt.executeUpdate();
			
			isok=true;//t
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			try {//t
				if (isok) {
					conn.commit();
				}else {
					conn.rollback();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
			
			closeAll(null, pstmt, conn);
		}
	}
	
	public List<MemberDTO> select() {
		List<MemberDTO> list = new ArrayList<MemberDTO>();
		Connection conn=null;
		PreparedStatement pstmt = null;
		String sql = "select mid,name 이름, job 직업, birth 생일 from member";
		ResultSet rs=null;
		boolean isok=false; //t 트랜젝션 연습, 이 메서드에는 사용안함
		try {
			conn = DriverManager.getConnection(URL, USER, PASSWORD);
			conn.setAutoCommit(false); //t 오토commit을 끈다
			pstmt=conn.prepareStatement(sql);
			
				
			rs=pstmt.executeQuery();
			while (rs.next()) {
				String mid = rs.getString("mid");
				String name = rs.getString("이름");
				String job = rs.getString("직업");
				Date birth = rs.getDate("생일");
				MemberDTO dto = new MemberDTO(mid, name, job, birth);
				list.add(dto);
			}
			
//			if(pstmt !=null) {			//t pstmt를 재사용하기 위해 먼저꺼는 닫아준다.
//				pstmt.close();
//			}
//			pstmt=conn.prepareStatement(sql2);
			
			
			isok=true;//t 정상 종료라면 변경
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			try {
				if (isok) {
					conn.commit();// 정상종료 commit
				}else {
					conn.rollback();// 비정상종료 rollback
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
			closeAll(rs, pstmt, conn);
		}
		
		return list;
	}
	
	
	public void insert(MemberDTO dto) {
		Connection conn = null;
		PreparedStatement pstmt=null;
		String sql="insert into member values (?,?,?,?)";
		boolean isok=false; //t 트랜젝션처리 학습을 위해 작성
		try {
			conn=DriverManager.getConnection(URL, USER, PASSWORD);
			conn.setAutoCommit(false);//t
			pstmt=conn.prepareStatement(sql);
			pstmt.setString(1, dto.getMid());
			pstmt.setString(2, dto.getName());
			pstmt.setString(3, dto.getJob());
			pstmt.setDate(4, dto.getBirth());
			pstmt.executeUpdate();
					
			
			isok=true;//t
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			try {//t 나중에는 이것도 메서드 처리
				if (isok) {
					conn.commit();
				}else {
					conn.rollback();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
			closeAll(null, pstmt, conn);	// 중복되는 close 기능들을 메서드 처리
		}
	}
}

조! 5일 다음주 목요일까지(12/4);
회원관리 프로그램 . 
변수를 어떤 이름으로, 프로젝트 네임, 페키지 네임을 어떤식으로 작성할지 예기.
완성 후 케치부분 어떻게 해야할지
기능을 나눠서 . 작성 . 

201127)033-------------------------------------------------------------------------------------
201203)033----------
jsp서블릿, 스프링프레임워크
class.forName(풀패키지). instans. 객체 생성. 리플렉트 // 문자열로 인스턴스 만들기.