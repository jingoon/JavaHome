
.length 
문자열의 길이를 int형 반환
문자열의 크기를 알고 싶을 때 사용
	public void me5() {
		String msg = "hello";
		System.out.println(msg.length());
	}

.charAt 
특정 index의 문자를 char형 반환
문자열의 특정 인덱스에 있는 문자를 알고 싶을 때
	public void me6() {
		String msg = "hello";
		System.out.println(msg.charAt(msg.length() - 1));
		for (int i = 0; i < msg.length(); i++) {
			System.out.println(msg.charAt(i));
		}
	}


.contains 
문자열에서 찾고자 하는 문자열의 유무를 boolean형 반환
문자열에서 특정 문자열이 있는지 알고 싶을 때

.indexOf 
문자열에서 찾고자 하는 문자열의 첫 index를 int형 반환
해당 문자나 문자열이 없으면 -1을 반환
.lastIndexOf
문자열 끝에서 부터 찾는다
	public void me7(String msg) {
		boolean result = msg.contains("he");
		int idx = msg.indexOf('k');
		System.out.println(result); // true
		System.out.println(idx); // -1

		idx = msg.indexOf('l'); // 첫 l의 idx
		System.out.println(idx);

		int lastIdx = msg.lastIndexOf('l');
		System.out.println(lastIdx);

		idx = msg.indexOf('l');
		System.out.println(idx + 1); // 두번째 l의 idx

		idx = msg.indexOf('l');
		System.out.println(idx + 1); // 세번째 l의 idx

	}

.endswith() 
문자열이 특정 문자열로 끝나는지 boolean형 반환
확장자명을 확인할 때 사용
	public void me8() {

		String msg1 = "abcd.jpg";
		String msg2 = "defg.txt";
		boolean result1 = msg1.endsWith("jpg");
		boolean result2 = msg2.endsWith("txt");
		System.out.println(msg1);
		System.out.println(msg2);

	}

.startswith() 
문자열이 특정 문자열로 시작하는지 boolean형 반환
	public void me9() {
		
		String msg = "hello";

		boolean result = msg.startsWith("h");
		System.out.println(result);
	}	

.equals() 
문자열과 문자열의 동등성을 비교해 boolean형 반환
문자열과 문자열의 데이터 값이 같은지 확인할 때 사용
.equalsIgnoreCase() 
문자열과 문자열의 대소문자와 상관없이 동등성을 비교해 boolean형 반환
	public void me10() {
		// 문자열끼리 데이터 값이 같은지 여부 확인
		// equals(), equalsIgnoerCase
		String msg1 = "hello";
		String msg2 = new String("hello");
		String msg3 = "hello";

		System.out.println(msg1.equals(msg2));
		System.out.println(msg1.equals(msg3));
		System.out.println(msg1.equalsIgnoreCase(msg3));
	}

.trim() 
문자열 좌우의 빈 공백을 제거
다시 문자열에 저장
	public void me11() {
		// 문자열의 좌우 공백제거
		// .trim()
		String msg = "      he       llo       ";
		System.out.println(msg);
		System.out.println(msg.trim());
		msg = msg.trim();
		System.out.println(msg);

	}

.substring() 
문자열의 특정 인덱스부터 특정 인덱스까지(지정할 때) String형 반환
"hello world"에서 "hello "를 잘라내고 "world"만 남게 하고싶을 때

	public void me12() {
		
		String msg = " hello world";
		msg = msg.trim();
		int idxS = msg.indexOf("w");
		String sub = msg.substring(idxS);
		System.out.println(sub);

	// sub = "lo wor";

		idxS = msg.indexOf("l");
		idxS = idxS + 1;
		int idxE = msg.indexOf("r");
		idxE = idxE + 1;
		sub = msg.substring(idxS, idxS);
		System.out.println(sub);

	}

.split() 
문자열을 특정 문자열로 분리하여 String[]형 반환
 		String msg = "teacheryo#1234##vip#1000#g#";	// ~##~ 중간은 인정 ~~#마지막은 no
		String[] arr = msg.split("#");			// delim은 "#"
		
		int token = arr.length;			// 토큰의 개수(배열의 갯수)
		System.out.println(token);			// 6
		for(int i=0;i<arr.length;i++) {
			System.out.println(arr[i]);		//모든  토큰 출력
		}

StringTokenizer()
StringTokenizer 변수 = new SrtringTokenizer(문자열, delim);
특정기준문자(delim)를 이용하여 서로다른 의미를 갖고 있는 문자열(=token)을 분할

.countTokens() 
StringTokenizer의 토큰의 갯수를 int형 반환
.hasMoreTokens() 
StringTokenizer의 토큰의 갯수 조건을  bolean형으로 반환(while문 조건식으로 사용)
.nextToken() 
StringTokenizer의 다음 토큰 String형 반환
 (split() + StringBuffuer 와 비슷)  
	
	public void me13() {
		
		String msg = "String#Tokenizer#new#st.#";
		StringTokenizer st = new StringTokenizer(msg, "#");
		String[] arr = new String[st.countTokens()];
		int i = 0;
		while (st.hasMoreTokens()) {
			arr[i] = st.nextToken();
		}

		for (int j = 0; j < arr.length; j++) {
			System.out.println(arr[j]);
		}

	}

.toUpperCase(); 
문자열을 대문자로 변경
.toLowerCase(); 
문자열을 소문자로 변경
	public void me15() {

		String msg1 = "hello";
		String msg2 = "Hello";
		String msg3 = "HELLO";

		// 대소문자로 변경
		String s1 = msg1.toUpperCase();
		System.out.println(s1);
		String s2 = msg2.toLowerCase();
		System.out.println(s2);

	}

String.format()
 문자열과 숫자의 표현
 String format(문자열, 값) args 가변인자
 %d %s %f %t %c %x %%
 표현자릿수 지정: %자릿수d
 좌정렬: %-자릿수d
 소수자릿수: %총자릿수.소수점이하자리수d
 소수점 이하 자릿수는 반올림
 ,의 표현(ex 1,000원): %,자릿수d
 자릿수 지정 후 빈공간을 0으로 채움: %0자릿수d

	public void me14() {
		
		String msg = "홍길동" + %d + " 살입니다.";
		String msg2 = "홍길동은 %d 살입니다.";
		System.out.println(String.format(msg2, 17));

		// 자릿수 공백포함 줄마추기
		String msg3 = "오늘은 2020년%2d월20일 입니다.";
		System.out.println(String.format(msg3, 3));
		String msg4 = "오늘은 2020년11월%-4d일 입니다.";
		System.out.println(String.format(msg4, 20));

		// 금액에 ,표기
		String msg5 = "내 전재산은 %d원입니다.";
		System.out.println(String.format(msg5, 1000));
		String msg6 = "내 전재산은 %,d원입니다.";
		System.out.println(String.format(msg6, 1000));
		String msg7 = "내 전재산은 %,15d원입니다.";
		System.out.println(String.format(msg7, 1000));

		// 자릿수의 공백을 0으로 채우기
		String msg8 = "내 등번호는 %2d입니다.";
		System.out.println(String.format(msg8, 8));
		String msg9 = "내 등번호는 %02d입니다.";
		System.out.println(String.format(msg9, 8));

		// 가변 매개변수
		String msg10 = "%d+%d = %d입니다.";
		System.out.println(String.format(msg10, 2, 3, 2+3));

		// 소수점의 자리수, %표현
		String msg11 = "%5.2f%%입니다.";
		System.out.println(String.format(msg11, 52.627));
		System.out.println(String.format(msg11, 52.627));

	}
